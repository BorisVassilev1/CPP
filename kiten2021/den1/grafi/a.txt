
n = 10; // varhove
m = 20; // rebra

// spisak na rebrata
graph = 
[
	[0, 1, d]
	[2, 3, d]
	[1, 3, d]
]

iskame da namerim susedite na k-tiq vruh
susedi = []
for(i = 0; i < n; i ++) { // n
	rebro = graph[i]// 2
	if(rebro[0] == k) { // 2
		susedi.push(rebro[1]) // 1
	} else if(rebro[1] == k) { // 2
		susedi.push(rebro[0]) //1
	}
}

O(n)

koi sa varhovete na k-toto rebro
graph[k]

O(1)


----------------------------------------------

// matrica na susedstvo
graph = [
	0: [ 0, 1, 0, 0, 0, 0, 0, 0, 0]
	1: [ 1, 0, 1, 0, 0, 0, 0, 0, 0]
	2: [ 0, 1, 0, 1, 1, 0, 0, 0, 1]
	3: [ 0, 0, 1, 0, 0, 0, 0, 0, 0]
	4: [ 0, 0, 1, 0, 0, 0, 0, 0, 0]
	5: [ 0, 0, 0, 0, 0, 0, 1, 0, 0]
	6: [ 0, 0, 0, 0, 0, 1, 0, 1, 0]
	7: [ 0, 0, 0, 0, 0, 0, 1, 0, 1]
	8: [ 0, 0, 1, 0, 0, 0, 0, 1, 0]
]

za vsqko rebro [i, j],
graph[i][j] = d

graph[i][j] = "ima li rebro mejdu vruh i i vruh j"

susedi = []
k
for(i = 0 -> n) {
	if(graph[i][k] != 0) {
		susedi.push(i)
	}
}

O(n)


// spisuk na susedi
graph = [
	[[1, d]]
	[[2, d]]
	[[1, d], [3, d], 4, 8]
	[2, 4]
	[2, 3]
	[6]
	[7, 5]
	[6, 8]
	[2, 7]
]

class Edge {
	const(to, weight) {
		...
	}
}

za vsqko rebro [i, j]
graph[i].push(j)



















